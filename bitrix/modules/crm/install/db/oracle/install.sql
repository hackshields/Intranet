CREATE TABLE B_CRM_LEAD
(
	ID NUMBER(18) NOT NULL,
	DATE_CREATE DATE DEFAULT SYSDATE NULL,
	DATE_MODIFY DATE DEFAULT SYSDATE NULL,
	CREATED_BY_ID NUMBER(18) NOT NULL,
	MODIFY_BY_ID NUMBER(18) NULL,
	ASSIGNED_BY_ID NUMBER(18) NULL,
	OPENED CHAR(1 CHAR) default 'N' NULL,
	CONTACT_ID NUMBER(18) NULL,	
	PRODUCT_ID VARCHAR2(50 CHAR) NULL,
	STATUS_ID VARCHAR2(50 CHAR) NULL,
	STATUS_DESCRIPTION VARCHAR2(2000 CHAR) NULL,
	OPPORTUNITY NUMBER(18, 2) NULL,
	CURRENCY_ID VARCHAR2(50 CHAR) NULL,
	OPPORTUNITY_ACCOUNT NUMBER(18, 2) NULL,
	ACCOUNT_CURRENCY_ID VARCHAR2(50 CHAR) NULL,
	COMPANY_ID NUMBER(18) NULL,
	SOURCE_ID VARCHAR2(50 CHAR) NULL,
	SOURCE_DESCRIPTION VARCHAR2(2000 CHAR) NULL,
	TITLE VARCHAR2(255 CHAR) NULL,
	COMPANY_TITLE VARCHAR2(255 CHAR) NULL,
	FULL_NAME VARCHAR2(100 CHAR) NULL,	
	NAME VARCHAR2(50 CHAR) NULL,
	LAST_NAME VARCHAR2(50 CHAR) NULL,
	SECOND_NAME VARCHAR2(50 CHAR) NULL,
	POST VARCHAR2(255 CHAR) NULL,
	ADDRESS VARCHAR2(2000 CHAR) NULL,
	COMMENTS VARCHAR2(2000 CHAR) NULL,
	EXCH_RATE NUMBER(18,2) DEFAULT '1' NULL,
	ORIGINATOR_ID VARCHAR2(255 CHAR) NULL,
	ORIGIN_ID VARCHAR2(255 CHAR) NULL,
	PRIMARY KEY (ID)
)
/
CREATE INDEX IX_B_CRM_LEAD_FNAME ON B_CRM_LEAD (FULL_NAME)
/
CREATE SEQUENCE SQ_B_CRM_LEAD
/
CREATE OR REPLACE TRIGGER B_CRM_LEAD_insert
BEFORE INSERT
ON B_CRM_LEAD
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_LEAD.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE TABLE B_CRM_DEAL
(
	ID NUMBER(18) NOT NULL,
	DATE_CREATE DATE DEFAULT SYSDATE NULL,
	DATE_MODIFY DATE DEFAULT SYSDATE NULL,
	CREATED_BY_ID NUMBER(18) NOT NULL,
	MODIFY_BY_ID NUMBER(18) NULL,
	ASSIGNED_BY_ID NUMBER(18) NULL,
	OPENED CHAR(1 CHAR) default 'N' NULL,
	LEAD_ID NUMBER(18) NULL,
	COMPANY_ID NUMBER(18) NULL,
	CONTACT_ID NUMBER(18) NULL,
	TITLE VARCHAR2(255 CHAR) NULL,
	PRODUCT_ID VARCHAR2(50 CHAR) NULL,
	STAGE_ID VARCHAR2(50 CHAR) NULL,
	CLOSED CHAR(1 CHAR) default 'N' NULL,
	TYPE_ID VARCHAR2(50 CHAR) NULL,
	OPPORTUNITY NUMBER(18, 2) NULL,
	CURRENCY_ID VARCHAR2(50 CHAR) NULL,
	OPPORTUNITY_ACCOUNT NUMBER(18, 2) NULL,
	ACCOUNT_CURRENCY_ID VARCHAR2(50 CHAR) NULL,
	PROBABILITY NUMBER(3) NULL,
	COMMENTS VARCHAR2(2000 CHAR) NULL,
	BEGINDATE DATE NULL,
	CLOSEDATE DATE NULL,
	EVENT_DATE DATE DEFAULT SYSDATE NULL,
	EVENT_ID VARCHAR2(50 CHAR) NULL,
	EVENT_DESCRIPTION VARCHAR2(2000 CHAR) NULL,	
	ADDITIONAL_INFO VARCHAR2(2000 CHAR) NULL,
	EXCH_RATE NUMBER(18,2) DEFAULT '1' NULL,
	ORIGINATOR_ID VARCHAR2(255 CHAR) NULL,
	ORIGIN_ID VARCHAR2(255 CHAR) NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_DEAL
/
CREATE OR REPLACE TRIGGER B_CRM_DEAL_insert
BEFORE INSERT
ON B_CRM_DEAL
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_DEAL.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE TABLE B_CRM_CONTACT
(
	ID NUMBER(18) NOT NULL,
	LEAD_ID NUMBER(18) NULL,
	DATE_CREATE DATE DEFAULT SYSDATE NULL,
	DATE_MODIFY DATE DEFAULT SYSDATE NULL,
	CREATED_BY_ID NUMBER(18) NOT NULL,
	MODIFY_BY_ID NUMBER(18) NULL,
	ASSIGNED_BY_ID NUMBER(18) NULL,
	OPENED CHAR(1 CHAR) default 'N' NULL,
	COMPANY_ID NUMBER(18) NULL,
	SOURCE_ID VARCHAR2(50 CHAR) NULL,
	SOURCE_DESCRIPTION VARCHAR2(2000 CHAR) NULL,
	FULL_NAME VARCHAR2(100 CHAR) NULL,
	NAME VARCHAR2(50 CHAR) NULL,
	LAST_NAME VARCHAR2(50 CHAR) NULL,
	SECOND_NAME VARCHAR2(50 CHAR) NULL,
	PHOTO VARCHAR2(10 CHAR) NULL,
	BIRTHDATE DATE NULL,
	POST VARCHAR2(255 CHAR) NULL,
	ADDRESS VARCHAR2(2000 CHAR) NULL,
	COMMENTS VARCHAR2(2000 CHAR) NULL,
	EXPORT CHAR(1 CHAR) default 'N' NULL,
	TYPE_ID VARCHAR2(50 CHAR) NULL,
	ORIGINATOR_ID VARCHAR2(255 CHAR) NULL,
	ORIGIN_ID VARCHAR2(255 CHAR) NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_CONTACT
/
CREATE OR REPLACE TRIGGER B_CRM_CONTACT_insert
BEFORE INSERT
ON B_CRM_CONTACT
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_CONTACT.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_CRM_CONTACT_NAME ON B_CRM_CONTACT (NAME)
/
CREATE INDEX IX_B_CRM_CONTACT_LNAME ON B_CRM_CONTACT (LAST_NAME)
/
CREATE INDEX IX_B_CRM_CONTACT_FNAME ON B_CRM_CONTACT (FULL_NAME)
/
CREATE TABLE B_CRM_COMPANY
(
	ID NUMBER(18) NOT NULL,
	LEAD_ID NUMBER(18) NULL,
	DATE_CREATE DATE DEFAULT SYSDATE NULL,
	DATE_MODIFY DATE DEFAULT SYSDATE NULL,
	CREATED_BY_ID NUMBER(18) NOT NULL,
	MODIFY_BY_ID NUMBER(18) NULL,
	ASSIGNED_BY_ID NUMBER(18) NULL,
	OPENED CHAR(1 CHAR) default 'N' NULL,
	TITLE VARCHAR2(255 CHAR) NULL,
	LOGO VARCHAR2(10 CHAR) NULL,
	ADDRESS VARCHAR2(2000 CHAR) NULL,
	ADDRESS_LEGAL VARCHAR2(2000 CHAR) NULL,
	BANKING_DETAILS VARCHAR2(2000 CHAR) NULL,
	COMMENTS VARCHAR2(2000 CHAR) NULL,
	COMPANY_TYPE VARCHAR2(50 CHAR) NULL,
	INDUSTRY VARCHAR2(50 CHAR) NULL,
	REVENUE VARCHAR2(255 CHAR) NULL,
	EMPLOYEES VARCHAR2(50 CHAR) NULL,
	CURRENCY_ID VARCHAR2(50 CHAR) NULL,
	ORIGINATOR_ID VARCHAR2(255 CHAR) NULL,
	ORIGIN_ID VARCHAR2(255 CHAR) NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_COMPANY
/
CREATE OR REPLACE TRIGGER B_CRM_COMPANY_insert
BEFORE INSERT
ON B_CRM_COMPANY
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_COMPANY.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_CRM_COMPANY ON B_CRM_COMPANY (TITLE)
/

CREATE TABLE B_CRM_STATUS
(
	ID NUMBER(18) NOT NULL,
	ENTITY_ID VARCHAR2(50 CHAR) NOT NULL,
	STATUS_ID VARCHAR2(50 CHAR) NOT NULL,
	NAME VARCHAR2(100 CHAR) NOT NULL,
	NAME_INIT VARCHAR2(100 CHAR) NULL,
	SORT NUMBER(18) NOT NULL,
	SYSTEM CHAR(1 CHAR) NOT NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_STATUS
/
CREATE OR REPLACE TRIGGER B_CRM_STATUS_insert
BEFORE INSERT
ON B_CRM_STATUS
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_STATUS.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_CRM_STATUS ON B_CRM_STATUS (STATUS_ID, ENTITY_ID)
/

CREATE TABLE B_CRM_FIELD_MULTI
(
	ID NUMBER(18) NOT NULL,
	ENTITY_ID VARCHAR2(50 CHAR) NOT NULL,
	ELEMENT_ID NUMBER(18) NOT NULL,
	TYPE_ID VARCHAR2(50 CHAR) NOT NULL,
	VALUE_TYPE VARCHAR2(50 CHAR) NOT NULL,
	COMPLEX_ID VARCHAR2(100 CHAR) NOT NULL,
	VALUE VARCHAR2(250 CHAR) NOT NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_FIELD_MULTI
/
CREATE OR REPLACE TRIGGER B_CRM_FIELD_MULTI_insert
BEFORE INSERT
ON B_CRM_FIELD_MULTI
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_FIELD_MULTI.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_CRM_FM_EE ON B_CRM_FIELD_MULTI (ENTITY_ID, ELEMENT_ID)
/

CREATE TABLE B_CRM_EVENT
(
	ID NUMBER(18) NOT NULL,
	DATE_CREATE DATE DEFAULT SYSDATE NULL,
	CREATED_BY_ID NUMBER(18) NULL,
	EVENT_ID VARCHAR2(50 CHAR) NULL,
	EVENT_NAME VARCHAR2(255 CHAR) NOT NULL,
	EVENT_TEXT_1 VARCHAR2(2000 CHAR) NULL,
	EVENT_TEXT_2 VARCHAR2(2000 CHAR) NULL,
	EVENT_TYPE NUMBER(18) NULL,
	FILES CLOB,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_EVENT
/
CREATE OR REPLACE TRIGGER B_CRM_EVENT_insert
BEFORE INSERT
ON B_CRM_EVENT
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_EVENT.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_CRM_EVENT_1 ON B_CRM_EVENT (DATE_CREATE)
/

CREATE TABLE B_CRM_EVENT_RELATIONS
(
	ID NUMBER(18) NOT NULL,
	ASSIGNED_BY_ID NUMBER(18) NULL,
	ENTITY_TYPE VARCHAR2(50 CHAR) NULL,
	ENTITY_ID NUMBER(18) NOT NULL,
	ENTITY_FIELD VARCHAR2(255 CHAR) NULL,
	EVENT_ID NUMBER(18) NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_EVENT_RELATIONS
/
CREATE OR REPLACE TRIGGER B_CRM_EVENT_RELATIONS_insert
BEFORE INSERT
ON B_CRM_EVENT_RELATIONS
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_EVENT_RELATIONS.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_EVENT_REL_ENTITY ON B_CRM_EVENT_RELATIONS (ENTITY_TYPE, ENTITY_ID, ENTITY_FIELD)
/
CREATE INDEX IX_EVENT_REL_1 ON B_CRM_EVENT_RELATIONS (EVENT_ID)
/

CREATE TABLE B_CRM_ENTITY_LOCK
(
  ENTITY_ID NUMBER(11) NOT NULL,
  ENTITY_TYPE VARCHAR2 (10 CHAR) NOT NULL,
  DATE_LOCK DATE DEFAULT SYSDATE NULL,
  LOCKED_BY VARCHAR2(32 CHAR) DEFAULT NULL,
  PRIMARY KEY (ENTITY_ID)
)
/
CREATE TABLE B_CRM_ENTITY_PERMS
(
  ID NUMBER(18) NOT NULL,
  ENTITY VARCHAR2(20 CHAR) NOT NULL,
  ENTITY_ID NUMBER(18) NOT NULL,
  ATTR VARCHAR2(30 CHAR) NOT NULL,
  PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_ENTITY_PERMS
/
CREATE OR REPLACE TRIGGER B_CRM_ENTITY_PERMS_insert
BEFORE INSERT
ON B_CRM_ENTITY_PERMS
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_ENTITY_PERMS.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_ENTITY_ATTR ON B_CRM_ENTITY_PERMS (ENTITY, ENTITY_ID, ATTR)
/
CREATE TABLE B_CRM_ROLE(
  ID NUMBER(18) NOT NULL,
  NAME VARCHAR2(255 CHAR) NOT NULL,
  PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_ROLE
/
CREATE OR REPLACE TRIGGER B_CRM_ROLE_insert
BEFORE INSERT
ON B_CRM_ROLE
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_ROLE.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE TABLE B_CRM_ROLE_PERMS(
  ID NUMBER(18) NOT NULL,
  ROLE_ID NUMBER(18) NOT NULL,
  ENTITY VARCHAR2(20 CHAR) NOT NULL,
  FIELD VARCHAR2(30 CHAR) DEFAULT '-',
  FIELD_VALUE VARCHAR2(255 CHAR) DEFAULT NULL,
  PERM_TYPE VARCHAR2(20 CHAR) NOT NULL,
  ATTR CHAR(1 CHAR) DEFAULT '',
  PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_ROLE_PERMS
/
CREATE OR REPLACE TRIGGER B_CRM_ROLE_PERMS_insert
BEFORE INSERT
ON B_CRM_ROLE_PERMS
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_ROLE_PERMS.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_ROLE_ID ON B_CRM_ROLE_PERMS (ROLE_ID)
/
CREATE TABLE B_CRM_ROLE_RELATION(
  ID NUMBER(18) NOT NULL,
  ROLE_ID NUMBER(18) NOT NULL,
  RELATION VARCHAR2(100 CHAR) NOT NULL,
  PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_ROLE_RELATION
/
CREATE OR REPLACE TRIGGER B_CRM_ROLE_RELATION_insert
BEFORE INSERT
ON B_CRM_ROLE_RELATION
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_ROLE_RELATION.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_ROLE_RELATION ON B_CRM_ROLE_RELATION (ROLE_ID, RELATION)
/

CREATE TABLE B_CRM_EXTERNAL_SALE
(
	ID int NOT NULL,
	ACTIVE char(1 CHAR) default 'Y' NOT NULL,
	DATE_CREATE date NOT NULL,
	DATE_UPDATE date NOT NULL,
	NAME varchar2(128 CHAR) NULL,
	SCHEME varchar2(5 CHAR) DEFAULT 'http' NOT NULL,
	SERVER varchar2(192 CHAR) NOT NULL,
	PORT int DEFAULT 80 NOT NULL,
	LOGIN varchar2(64 CHAR) NOT NULL,
	PASSWORD varchar2(128 CHAR) NOT NULL,
	MODIFICATION_LABEL int NULL,
	IMPORT_SIZE int NULL,
	IMPORT_PERIOD int NULL,
	IMPORT_PROBABILITY int NULL,
	IMPORT_RESPONSIBLE int NULL,
	IMPORT_PUBLIC CHAR(1 CHAR) NULL,
	IMPORT_PREFIX varchar2(128 CHAR) NULL,
	IMPORT_ERRORS int NULL,
	IMPORT_GROUP_ID int NULL,
	COOKIE clob NULL,
	LAST_STATUS clob NULL,
	LAST_STATUS_DATE date NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CRM_EXTERNAL_SALE INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER B_CRM_EXTERNAL_SALE_INSERT
BEFORE INSERT
ON B_CRM_EXTERNAL_SALE
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_EXTERNAL_SALE.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_CRM_CATALOG
(
  ID NUMBER(18) NOT NULL,
  ORIGINATOR_ID VARCHAR2(255 CHAR) NULL,
  ORIGIN_ID VARCHAR2(255 CHAR) NULL,
  PRIMARY KEY(ID)
)
/

CREATE TABLE B_CRM_PRODUCT
(
  ID NUMBER(18) NOT NULL,
  CATALOG_ID NUMBER(18) NOT NULL,
  CURRENCY_ID VARCHAR2(50 CHAR) NOT NULL,
  PRICE NUMBER(18,2) DEFAULT '0' NOT NULL,
  ORIGINATOR_ID VARCHAR2(255 CHAR) NULL,
  ORIGIN_ID VARCHAR2(255 CHAR) NULL,
  PRIMARY KEY(ID)
)

/
CREATE TABLE B_CRM_PRODUCT_ROW
(
  ID NUMBER(18) NOT NULL,
  OWNER_ID NUMBER(18) NOT NULL,
  OWNER_TYPE CHAR(3 CHAR) NOT NULL,
  PRODUCT_ID NUMBER(18) NOT NULL,
  PRICE NUMBER(18,2) NOT NULL,
  PRICE_ACCOUNT NUMBER(18,2) DEFAULT '0' NOT NULL,
  QUANTITY NUMBER(18) NOT NULL,
  PRIMARY KEY(ID)
)

/
CREATE SEQUENCE SQ_B_CRM_PRODUCT_ROW START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER B_CRM_PRODUCT_ROW_INSERT
BEFORE INSERT
ON B_CRM_PRODUCT_ROW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_PRODUCT_ROW.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_CRM_ACT
(
	ID NUMBER(18) NOT NULL,
	TYPE_ID NUMBER(3) NOT NULL,
	OWNER_ID NUMBER(18) NOT NULL,
	OWNER_TYPE_ID NUMBER(3),
	ASSOCIATED_ENTITY_ID NUMBER(18),
	SUBJECT VARCHAR2(512 CHAR) NOT NULL,
	COMPLETED CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	RESPONSIBLE_ID NUMBER(18) NOT NULL,
	PRIORITY NUMBER(18) NOT NULL,
	NOTIFY_TYPE NUMBER(18) NOT NULL,
	NOTIFY_VALUE NUMBER(18),
	DESCRIPTION VARCHAR2(2048 CHAR),
	DESCRIPTION_TYPE NUMBER(3) NULL,
	DIRECTION NUMBER(3) NOT NULL,
	LOCATION VARCHAR2(256 CHAR),
	CREATED DATE NOT NULL,
	LAST_UPDATED DATE NOT NULL,
	START_TIME DATE,
	END_TIME DATE,
	STORAGE_TYPE_ID NUMBER(3) NULL,
	STORAGE_ELEMENT_IDS CLOB NULL,
	PARENT_ID NUMBER(18) DEFAULT 0 NOT NULL,
	URN VARCHAR2(64 CHAR) NULL,
	SETTINGS CLOB NULL,
	ORIGIN_ID VARCHAR2(255 CHAR) NULL,
	AUTHOR_ID NUMBER(18) NULL,
	EDITOR_ID NUMBER(18) NULL,
	CONSTRAINT PK_B_CRM_ACT PRIMARY KEY (ID)
)
/
CREATE INDEX IX_B_CRM_ACT ON B_CRM_ACT (ID, PARENT_ID, OWNER_ID, OWNER_TYPE_ID)
/

CREATE INDEX IX_B_CRM_ACT_1 ON B_CRM_ACT (RESPONSIBLE_ID, COMPLETED, START_TIME)
/

CREATE SEQUENCE SQ_B_CRM_ACT
/
CREATE OR REPLACE TRIGGER B_CRM_ACT_INSERT BEFORE INSERT ON B_CRM_ACT FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_ACT.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE TABLE B_CRM_ACT_BIND
(
	ID NUMBER(18),
	ACTIVITY_ID NUMBER(18) NOT NULL,
	OWNER_ID NUMBER(18) NOT NULL,
	OWNER_TYPE_ID NUMBER(3),
	CONSTRAINT PK_B_CRM_ACT_BIND PRIMARY KEY (ID)
)
/
CREATE INDEX IX_B_CRM_ACT_BIND ON B_CRM_ACT_BIND (ACTIVITY_ID, OWNER_ID, OWNER_TYPE_ID)
/
CREATE SEQUENCE SQ_B_CRM_ACT_BIND
/
CREATE OR REPLACE TRIGGER B_CRM_ACT_BIND_INSERT BEFORE INSERT ON B_CRM_ACT_BIND FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_ACT_BIND.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE TABLE B_CRM_ACT_COMM
(
	ID NUMBER(18),
	ACTIVITY_ID NUMBER(18) NOT NULL,
	OWNER_ID NUMBER(18) NOT NULL,
	OWNER_TYPE_ID NUMBER(3),
	TYPE VARCHAR2(64 CHAR),
	VALUE VARCHAR2(256 CHAR),
	ENTITY_ID NUMBER(18) NOT NULL,
	ENTITY_TYPE_ID NUMBER(3) NOT NULL,
	ENTITY_SETTINGS CLOB,
	CONSTRAINT PK_B_CRM_ACT_COMM PRIMARY KEY (ID)
)
/
CREATE INDEX IX_B_CRM_ACT_COMM ON B_CRM_ACT_COMM (ACTIVITY_ID, OWNER_ID, OWNER_TYPE_ID, ENTITY_ID, ENTITY_TYPE_ID)
/
CREATE SEQUENCE SQ_B_CRM_ACT_COMM
/
CREATE OR REPLACE TRIGGER B_CRM_ACT_COMM_INSERT BEFORE INSERT ON B_CRM_ACT_COMM FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_ACT_COMM.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE TABLE B_CRM_ACT_ELEM
(
	ACTIVITY_ID NUMBER(18) NOT NULL,
	STORAGE_TYPE_ID NUMBER(3) NOT NULL,
	ELEMENT_ID NUMBER(18) NOT NULL,
	CONSTRAINT PK_B_CRM_ACT_ELEM PRIMARY KEY (ACTIVITY_ID, STORAGE_TYPE_ID, ELEMENT_ID)
)
/
CREATE TABLE B_CRM_USR_ACT
(
	USER_ID NUMBER(18) NOT NULL,
	OWNER_ID NUMBER(18) NOT NULL,
	OWNER_TYPE_ID NUMBER(3) NOT NULL,
	ACTIVITY_TIME DATE NOT NULL,
	ACTIVITY_ID NUMBER(18) NOT NULL,
	DEPARTMENT_ID NUMBER(18) NOT NULL,
	CONSTRAINT PK_B_CRM_USR_ACT PRIMARY KEY (USER_ID, OWNER_ID, OWNER_TYPE_ID)
)
/
CREATE INDEX IX_B_CRM_USR_ACT ON B_CRM_USR_ACT (USER_ID, OWNER_ID, OWNER_TYPE_ID, ACTIVITY_TIME, ACTIVITY_ID, DEPARTMENT_ID)
/
CREATE TABLE B_CRM_USR_MT
(
	ID NUMBER(18) NOT NULL,
	OWNER_ID NUMBER(18) NOT NULL,
	ENTITY_TYPE_ID NUMBER(3) NOT NULL,
	SCOPE NUMBER(3) NOT NULL,
	IS_ACTIVE CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	TITLE VARCHAR2(128 CHAR),
	EMAIL_FROM VARCHAR2(255 CHAR),
	SUBJECT VARCHAR2(255 CHAR),
	BODY CLOB,
	SING_REQUIRED CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	SORT NUMBER(18) DEFAULT 100 NOT NULL,
	CREATED DATE NOT NULL,
	LAST_UPDATED DATE NOT NULL,
	AUTHOR_ID NUMBER(18) NOT NULL,
	EDITOR_ID NUMBER(18) NOT NULL,
	CONSTRAINT PK_B_CRM_USR_MT PRIMARY KEY (ID)
)
/
CREATE INDEX IX_B_CRM_USR_MT ON B_CRM_USR_MT (OWNER_ID, ENTITY_TYPE_ID, SCOPE, IS_ACTIVE)
/
CREATE SEQUENCE SQ_B_CRM_USR_MT
/
CREATE OR REPLACE TRIGGER B_CRM_USR_MT_INSERT BEFORE INSERT ON B_CRM_USR_MT FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CRM_USR_MT.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
