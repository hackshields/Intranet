CREATE TABLE B_CATALOG_CURRENCY
(
	CURRENCY CHAR(3 CHAR) NOT NULL,
	AMOUNT_CNT NUMBER(18) DEFAULT '1' NULL,
	AMOUNT NUMBER(18, 4) NULL,
	SORT NUMBER(18) DEFAULT '100' NOT NULL,
	DATE_UPDATE DATE NOT NULL,
	PRIMARY KEY (CURRENCY)
)
/

CREATE TABLE B_CATALOG_CURRENCY_LANG
(
	CURRENCY CHAR(3 CHAR) NOT NULL,
	LID CHAR(2 CHAR) NOT NULL,
	FORMAT_STRING VARCHAR2(50 CHAR) NOT NULL,
	FULL_NAME VARCHAR2(50 CHAR) NULL,
	DEC_POINT VARCHAR2(5 CHAR) DEFAULT '.' NULL,
	THOUSANDS_SEP VARCHAR2(5 CHAR) DEFAULT '' NULL,
	DECIMALS NUMBER(4) DEFAULT '2' NOT NULL,
	THOUSANDS_VARIANT CHAR(1 CHAR) NULL,
	PRIMARY KEY (CURRENCY, LID)
)
/

CREATE TABLE B_CATALOG_CURRENCY_RATE
(
	ID NUMBER(18) NOT NULL,
	CURRENCY CHAR(3 CHAR) NOT NULL,
	DATE_RATE DATE NOT NULL,
	RATE_CNT NUMBER(18) DEFAULT '1' NOT NULL,
	RATE NUMBER(18, 4) DEFAULT '0.00' NOT NULL,
	PRIMARY KEY (ID)
)
/

CREATE INDEX IX_CURRENCY_RATE ON B_CATALOG_CURRENCY_RATE(CURRENCY, DATE_RATE)
/

CREATE SEQUENCE SQ_B_CATALOG_CURRENCY_RATE INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_CATALOG_CURRENCY_RATE_INSERT
BEFORE INSERT
ON B_CATALOG_CURRENCY_RATE
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_CATALOG_CURRENCY_RATE.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE OR REPLACE FUNCTION CONVERTCURRENCY
(
	pSum NUMBER,
	pFrom CHAR,
	pTo CHAR,
	pDate DATE := SYSDATE
)
RETURN NUMBER
IS
	vPRICE NUMBER(18,2);
	vRateFrom NUMBER(18,4) := NULL;
	vRateFromCnt NUMBER(18) := NULL;
	vRateTo NUMBER(18,4) := NULL;
	vRateToCnt NUMBER(18) := NULL;
	vCurr CHAR(3);
	CURSOR cRate IS
		SELECT RATE, RATE_CNT
		FROM B_CATALOG_CURRENCY_RATE
		WHERE DATE_RATE < pDate+1 AND CURRENCY=vCurr
		ORDER BY DATE_RATE DESC;
	rRate cRate%ROWTYPE;
BEGIN

	vCurr := pFrom;
	OPEN cRate;
	FETCH cRate INTO rRate;
	IF cRate%FOUND THEN
		vRateFrom := rRate.RATE;
		vRateFromCnt := rRate.RATE_CNT;
	END IF;
	CLOSE cRate;

	vCurr := pTo;
	OPEN cRate;
	FETCH cRate INTO rRate;
	IF cRate%FOUND THEN
		vRateTo := rRate.RATE;
		vRateToCnt := rRate.RATE_CNT;
	END IF;
	CLOSE cRate;

	SELECT TO_NUMBER(pSum * NVL(vRateFrom, C1.AMOUNT) * NVL(vRateToCnt, C2.AMOUNT_CNT)/NVL(vRateTo, C2.AMOUNT)/NVL(vRateFromCnt, C1.AMOUNT_CNT))
	INTO vPRICE
	FROM B_CATALOG_CURRENCY C1, B_CATALOG_CURRENCY C2
	WHERE C1.CURRENCY=pFrom AND C2.CURRENCY=pTo;

	return vPRICE;
END;
/

CREATE OR REPLACE FUNCTION GETCURRENCYFACTOR
(
	pFrom CHAR,
	pTo CHAR,
	pDate DATE := SYSDATE
)
RETURN NUMBER
IS
	vPRICE NUMBER(38,20);
	vRateFrom NUMBER(18,4) := NULL;
	vRateFromCnt NUMBER(18) := NULL;
	vRateTo NUMBER(18,4) := NULL;
	vRateToCnt NUMBER(18) := NULL;
	vCurr CHAR(3);
	CURSOR cRate IS
		SELECT RATE, RATE_CNT
		FROM B_CATALOG_CURRENCY_RATE
		WHERE DATE_RATE < pDate+1 AND CURRENCY=vCurr
		ORDER BY DATE_RATE DESC;
	rRate cRate%ROWTYPE;
BEGIN

	vCurr := pFrom;
	OPEN cRate;
	FETCH cRate INTO rRate;
	IF cRate%FOUND THEN
		vRateFrom := rRate.RATE;
		vRateFromCnt := rRate.RATE_CNT;
	END IF;
	CLOSE cRate;

	vCurr := pTo;
	OPEN cRate;
	FETCH cRate INTO rRate;
	IF cRate%FOUND THEN
		vRateTo := rRate.RATE;
		vRateToCnt := rRate.RATE_CNT;
	END IF;
	CLOSE cRate;

	SELECT TO_NUMBER(NVL(vRateFrom, C1.AMOUNT) * NVL(vRateToCnt, C2.AMOUNT_CNT)/NVL(vRateTo, C2.AMOUNT)/NVL(vRateFromCnt, C1.AMOUNT_CNT))
	INTO vPRICE
	FROM B_CATALOG_CURRENCY C1, B_CATALOG_CURRENCY C2
	WHERE C1.CURRENCY=pFrom AND C2.CURRENCY=pTo;

	return vPRICE;
END;
/